{
  "name": "inuit.css",
  "version": "5.0.0",
  "dependencies": {},
  "gitHead": "b32159495c432a926ec01dda4bc1d2a1b89c485f",
  "readme": "![inuit.css](http://inuitcss.com/img/content/logo.png)\n\n# inuit.css – v5.0\n\ninuit.css is a powerful little framework designed for _serious_ developers.\n\nIt is a Sass based, Object Oriented framework that is full of objects and\nabstractions. inuit.css provides little-to-no design which means no undoing\nthings, no deleting CSS and no adhering to other peoples’ design decisions.\n\ninuit.css is built on a [BEM](http://bem.info/)-style naming convention and\nhoned based on [work done by Nicolas Gallagher](https://gist.github.com/1309546).\n\ninuit.css is ideally suited to designers who want to focus on the creative and\nnot code, and developers who understand the need for abstraction and an OO\napproach.\n\ninuit.css gives you design patterns, not design decisions. It features nestable,\nfluid grids; a double-stranded heading hierarchy; sprites; buttons and a lot,\n_lot_ more.\n\n\n**Use inuit.css if:**\n\n* You need a powerful library of objects and abstractions.\n* You understand/appreciate the value of OO code and the need for scalability\n  and reuse.\n* You are a confident/competent developer comfortable with OOCSS and Sass, as\n  well as familiarity with OO principles in general.\n\n**Do not use inuit.css if:**\n\n* You need a framework that supplies design (I’d recommend\n  [Bootstrap](http://twitter.github.com/bootstrap/) for that).\n\n## Browser support\n\ninuit.css is a modern framework for modern browsers. It takes advantage of\n[normalize.css](http://necolas.github.com/normalize.css/) and global\n`box-sizing:border-box;` (optional). As such, inuit.css is intended for **IE8**\nand above only.  The last release to support IE7 was\n[v4.1.5](https://github.com/csswizardry/inuit.css/archive/v4.1.5.zip).\n\n## The developer\n\nThere are a million-and-one different CSS frameworks out there so this rather\ncringeworthy section is an attempt to validate inuit.css and give it some\ncredibility…\n\nI am [Harry Roberts](http://hry.rbrts.me), I am a 22 year old developer and\nfront-end architect from the UK. I work as a Senior UI Developer for\n[BSkyB](http://en.wikipedia.org/wiki/BSkyB) where it is my job to build scalable\nfront-ends, write internally used CSS frameworks and libraries, and to architect\nCSS and front-end builds.\n\nI [write](http://csswizardry.com), [tweet](http://twitter.com/csswizardry) and\n[speak](http://speakerdeck.com/u/csswizardry/) about OOCSS, scalable CSS,\nmaintainability, working in large teams, CSS performance, CSS architecture and a\nwhole lot more.\n\ninuit.css is the result of years of my specialism in CSS (as CSS is all I do).\nIt is a collection of design patterns, objects, and abstractions that have been\nrefined and bulletproofed over hours of development across an array of projects\nof varying sizes. inuit.css is the result of hundreds of hours of work all\ncondensed into one powerful little framework.\n\n## Installation\n\n**Requires Sass 3.2**\n\ninuit.css v5.0+ is designed to be even more advanced than previous versions of\nyour favourite CSS framework! inuit.css’ core library is now intended to be used\nas a submodule which means you can always get inuit.css’ latest updates without\never having to touch a line of library code.\n\nThis works by having this, the inuit.css core library, and the\n[inuit.css-web-template](https://github.com/csswizardry/inuit.css-web-template).\nThe web template is very un-opinionated and simply houses your site, however\nyou wish to build it. It has a `css/` directory which contains your\nproject-specific variables and any stylesheets that extend inuit.css, as well as\nhousing inuit.css as an updatable submodule. Any of inuit.css’ default settings\ncan be simply overridden from the web template which means you no longer have to\nedit a single line of the framework (which in turn means that incorporating\ninuit.css updates is as simple as a `$ git pull`).\n\n### Install via command line (recommended)\n\nThe command line install of inuit.css is _incredibly_ simple:\n\n    $ git clone --recursive git@github.com:csswizardry/inuit.css-web-template.git your-project-folder\n    $ cd your-project-folder\n    $ ./go\n\nWhat we are doing here is cloning an instance of the inuit.css-web-template and\nits submodules (that’s what the `--recursive` does) into a directory which you\nspecify. Next we `cd` into that directory and run [our `go` script](https://github.com/csswizardry/inuit.css-web-template/blob/master/go).\nThis script (courtesy of [Nick Payne](http://twitter.com/makeusabrew)) simply\nremoves the web template’s Git instance and replaces it with a fresh one for\nyour project, whilst also maintaining your inuit.css submodule.\n\n### Install via zip\n\nThough not tested, using inuit.css from its GitHub zip _should_ be fairly\nsimple. Using inuit.css from zipped source does mean that you can’t update\ninuit.css as a submodule, but you may well be able to drop fresh zip files into\nthe `css/inuit.css/` directory provided you don’t edit any library code.\n\nFirstly you need to download [the web template](https://github.com/csswizardry/inuit.css-web-template)\nzip and unpack it to a location of your choosing. Next you need to download the\ninuit.css core zip and unpack that into `css/inuit.css/` in your new project.\n\n## Getting started\n\nOnce you have your project set up, you should be looking at a directory\nstructure a little like this:\n\n    your-project-folder/\n        css/\n            inuit.css/\n            _vars.scss\n            style.scss\n            watch\n        index.html\n\nYour CSS directory holds everything you need to get building:\n\n* Everything in `css/inuit.css/` is library code which **should not** be edited.\n  If you `cd` into here you should see that this submodule will initially be on\n  `(no branch)`, this is because the submodule points at a specific commit and\n  not a branch. You can treat this directory like any other Git project which\n  means you can `$ git checkout master` to get your submodule on the most\n  up-to-date stable version of inuit.css. To grab any new changes simply run\n  `$ git pull` on the `master` branch.\n* `_vars.scss` contains any project variables you need, as well as any overrides\n  you wish to make to the inuit.css library. It also houses feature switches to\n  turn inuit.css’ objects and abstractions on and off as you need them.\n* `style.scss` is your master Sass stylesheet which will concatenate any other\n  stylesheets from inuit.css and your extensions when it is compiled.\n* `watch` is a handy little script which makes it easier for you to watch your\n  Sass from the command line; instead of the `$ sass --watch ...` command, you\n  now need only type `$ ./watch` and the script will do the rest. Running this\n  will compile your project into `style[.min].css`.\n\n## How inuit.css works\n\ninuit.css works in ‘layers’, not dissimilar to [SMACSS](http://smacss.com/). The\nprinciple of inuit.css’ architecture is levels of extension; each layer of code\nextends the layer below.\n\nWe start in `inuit.css/generic/`, with our most generic, low-level styling,\nthings like a clearfix, [normalize.css](http://necolas.github.com/normalize.css/),\nour reset and any shared styling like margins (for vertical rythmn).\n\nOn top of that we lay our base styles, found in `inuit.css/base/`; these are\nthings like unclassed headings, what our basic forms look like, how simple\ntables appear. These are all design-free HTML elements that you can extend with\nyour own styles later on.\n\nNext up, in `inuit.css/objects/`, we have our objects and abstractions; these\nare all scaffolding type constructs that hold no styling, but do heavy lifting.\nIn here we have things like\n[the media object](http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/),\n[the nav abstraction](http://csswizardry.com/2011/09/the-nav-abstraction/) and\nother unstyled objects that you can use to construct design patterns _without_\ndesign (that bit is left up to you).\n\nFinally we have our helper classes (though these live back in the `inuit.css/generic/`\ndirectory); these are things like margin helper classes, width classes and other\n‘style trumps’ which need to take precedence over any things that have gone\nbefore them. These classes are used to modify your objects and abstractions on a\ncase-by-case basis.\n\n## Overriding inuit.css’ defaults\n\ninuit.css has a file called `_defaults.scss` which contains all the Sass\nvariables required for the library to compile without failing. These variables\nare preset because Sass will error without them, however they are **not** set in\nstone, and you are encouranged to override and experiment with them.\n\nIt is tempting to modify their vaules in the inuit.css submodule but this is\n**not** the correct method for modifying inuit.css, and in doing so you will\nprevent yourself from being able to update inuit.css’ core library. The correct\nproceedure is to redefine that variable in `_vars.scss` found in the inuit.css\nweb template. Let’s take an example…\n\nIn inuit.css’ `_defaults.scss` we find the following:\n\n    $h1-size:           36px!default; // .alpha\n    $h2-size:           30px!default; // .beta\n    $h3-size:           24px!default; // .gamma\n    $h4-size:           20px!default; // .delta\n    $h5-size:           16px!default; // .epsilon\n    $h6-size:           14px!default; // .zeta\n\nLet’s say we want our `h1`s to be `48px` and not `36px`; instead of modifying\nthe value of `$h1-size` here, pop open your `_vars.scss` file and add this in\nthe overrides section:\n\n    /*------------------------------------*\\\n        $OVERRIDES\n    \\*------------------------------------*/\n    /**\n     * Place any variables that should override inuit.css’ defaults here.\n     */\n    $h1-size:48px;\n\nNow when you compile your CSS, inuit.css will know to ignore its preset value\n(that is what `!default` is for) in favour of your own. By doing things this way\nyou can change the values that inuit.css uses without having to modify inuit.css\nitself, thus leaving it free to be updated. \n\nIn this file you will also see your feature switches needed to turn objects and\nabstractions on and off. Feature switches are only preset for objects and\nabstractions; you will **not** initially find switches for things like\n`$debug-mode` in here, but they can be turned on and off by adding an override\nas outlined above, e.g.:\n\n    /*------------------------------------*\\\n        $OVERRIDES\n    \\*------------------------------------*/\n    /**\n     * Place any variables that should override inuit.css’ defaults here.\n     */\n    $h1-size:48px;\n    $push:true;\n    $palm-push:true;\n\nThis file can also house any custom variables that you wish to use in extending\ninuit.css, as covered in the next section.\n\n## Extending inuit.css\n\ninuit.css is, by design, a very design-free framework. This means that the\nstyle and design of your site is left entirely up to you (as it should be).\nBecause inuit.css gives you lots of customisable foundations, you need to add\nthe final layer: UI.\n\nHow you go about this step is largely left up to you, but it is common practice\nto create another directory in `css/` called `ui/`, leaving you with:\n\n    your-project-folder/\n        css/\n            inuit.css/\n            ui/\n            _vars.scss\n            style.scss \n            watch\n        index.html\n\nIn here you can place your own Sass files which hold your UI’s CSS, for example:\n\n    ui/\n        _contact-form.scss\n        _footer.scss\n        _pricing-table.scss\n\nYou then include these from `style.scss`, like so:\n\n    /**\n     * She’s all yours, cap’n... Begin importing your stuff here.\n     */\n    //@import \"ui/example\";\n    @import \"ui/footer\";\n    @import \"ui/contact-form\";\n    @import \"ui/pricing-table\";\n\nNow, when you run `$ ./watch`, `style.scss` will be calling:\n\n1. Your variables\n2. The inuit.css core library (as outlined above)\n3. Your custom/UI CSS\n\n…and building a concatenated stylesheet out of it all. Neat, huh?!\n\n## Footprint\n\nOut of the box, inuit.css is very small, however it is **imperative** that you\nonly ever deploy a minified version of your compiled stylesheet to your live\nenvironment. inuit.css compiles stright to minified output by default, but you\ncan change this in `watch` if you have a build process in place.\n\nIt is also **highly** recommended that you enable gzip compression on any text\nassets being served from your site; doing so will further reduce the footprint\nof inuit.css and greatly help your site’s performance.\n\n## Documentation\n\nThere are no official docs for inuit.css because the code _is_ the\ndocumentation. Everything is heavily commented with example HTML. If you\nstruggle with anything please tweet at [@inuitcss](http://twitter.com/inuitcss)\nand/or [open an issue](https://github.com/csswizardry/inuit.css/issues) and I’ll\ntry help out and use your feedback to improve the documentation.\n\nIt is strongly encouraged that you thoroughly read the source of inuit.css’\nfiles, particularly `_inuit.scss`.\n\n### Demos\n\nAlthough there are no docs as such, there is [a dedicated inuit.css jsFiddle\naccount](http://jsfiddle.net/user/inuitcss/fiddles/) which houses plenty of\ndemos of various aspects of the framework.\n\n### Development\n\nYou can keep up-to-date with upcoming features, suggestions and fixes by looking\nat the [inuit.css Trello board](https://trello.com/board/inuit-css/50a16487543dea585502f3d2).\n\n## Looking for a little LESS?\n\n[Peter Wilson](http://twitter.com/pwcc) is maintaining a LESS port of inuit.css:\ncheck [the GitHub repo](https://github.com/peterwilsoncc/inuit.css).\n\n## Using Compass?\n\n[Stephen Way](http://github.com/stephenway) is maintaining a Compass port of\ninuit.css: check [the GitHub repo](https://github.com/stephenway/compass-inuit).\n\n## Test-drive\n\nIf you would like to try inuit.css out before you download anything there is a\ncompiled version [on jsFiddle](http://jsfiddle.net/inuitcss/a6yS3/) that you\nare encouraged to fork and play with. Refer back to\n[the source here on GitHub](https://github.com/csswizardry/inuit.css/blob/master/inuit.css/_inuit.scss)\nfor documentation.\n\n## As used by\n\n* [BSkyB](http://en.wikipedia.org/wiki/BSkyB)\n* [pr.ofile.me](http://pr.ofile.me)\n* [Lukas Bestle](http://lu-x.me)\n* [Matthew Tyas](http://matthewtyas.com/)\n\n### Using inuit.css?\n\nIf you use inuit.css on a live project then [tweet at me](http://twitter.com/inuitcss)\nand I’ll send you some inuit.css stickers!\n\n## Support inuit.css\n\nIf you use and/or like inuit.css, perhaps you might consider [supporting it\nthrough Gumroad](http://gum.co/nOoht).\n\n## Credits\n\ninuit.css, although produced and maintained by one developer, could not have\nbeen possible without inspiration and work from an array of other people.\n\n* **[Nicole Sullivan](https://twitter.com/stubbornella)** for her work on OOCSS\n* **[Jonathan Snook](https://twitter.com/snookca)** for his work on SMACSS\n* **[Nicolas Gallagher](https://twitter.com/necolas)** for his work on numerous\n  CSS things\n* **[Bryan James](https://twitter.com/WengersToyBus)** for the inuit.css logo\n* **[Nick Payne](https://twitter.com/makeusabrew)** for helping with v5.0’s\n  submodule architecture.\n\nAnd probably more…\n\n## License\n\nCopyright 2013 Harry Roberts\n\nLicensed under the Apache License, Version 2.0.\n\n---\n\n**inuit.css is the most powerful little framework out there, and it’s ready to\ngo!**\n",
  "readmeFilename": "README.md",
  "_id": "inuit.css@5.0.0",
  "description": "![inuit.css](http://inuitcss.com/img/content/logo.png)",
  "repository": {
    "type": "git",
    "url": "git://github.com/csswizardry/inuit.css.git"
  }
}